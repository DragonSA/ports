#!/usr/bin/env python

import codecs
import json
from os import environ, execvp, getcwd, getpid, walk
from os.path import basename, isfile, join, splitext
from pipes import quote
from sys import argv, stderr
from xml.etree import ElementTree

PROJECT_JSON = "project.json"

NUGET_PACKAGEDIR = environ["NUGET_PACKAGEDIR"]

blacklist = set([
    "Microsoft.VisualStudio.Setup.Configuration.Interop",
    "xunit",
    "xunit.core",
    "xunit.runner.visualstudio",
])

dependencies = {
    "System.IO.Compression": ["System.IO"],
    "System.Collections.Immutable": ["System.Collections"],
}

facades = set([
    "System.Collections",
    "System.IO",
    "System.Runtime",
    "System.Runtime.InteropServices.RuntimeInformation"
])

def log(message):
    stderr.write("%s\n" % message)

def add_nuget(depend, depends, references):
    if depend not in depends:
        return False, None
    version = depends[depend]
    nuspec_path = join(NUGET_PACKAGEDIR, depend, version, depend + ".nuspec")
    if not isfile(nuspec_path):
        return False, None
    def parse_nuspec():
        log("/nuget: %s" % depend)
        #log("\t/nuspec: %s" % nuspec_path)
        nuspec = ElementTree.parse(nuspec_path).getroot()
        ns = nuspec.tag[:-len("package")]
        dependencies = nuspec.findall('.//%sdependencies/%sdependency' % (ns, ns))
        if dependencies:
            log("\t/dependencies: %s" % ", ".join(dep.get('id') for dep in dependencies))
        for dependency in dependencies:
            dep = dependency.get('id')
            if dep not in references:
                ver = dependency.get('version')
                if ver[0] == '[' and ver[-1] == ']':
                    ver = ver[1:-1]
                references.append(dep)
                depends[dep] = ver
        dlls = [ref.get('file') for ref in nuspec.findall('.//%sreferences/' % ns)]
        if dlls:
            log("\t/references: %s" % ", ".join(dlls))
        dlls.append(depend + ".dll")
        for dll in dlls:
            dll_paths = []
            for root, dirs, files in walk(join(NUGET_PACKAGEDIR, depend, version)):
                if dll in files:
                    dll_paths.append(join(root, dll))
            if len(dll_paths) > 0:
                if len(dll_paths) > 1:
                    dll_path = [p for p in dll_paths if "net4" in p or "net3" in p][0]
                else:
                    dll_path = dll_paths[0]
                log("\t/reference:%s" % dll_path)
                if len(dll_paths) > 1:
                    for path in dll_paths:
                        if path != dll_path:
                            log("\t\t/skipped: %s" % path)
                yield "/reference:%s" % dll_path
    return True, parse_nuspec()

def add_depends(references, depends):
    for depend in references:
        log("/reference:%s (direct)" % depend)
    start = len(references)
    references += [depend for depend in depends.keys() + ["System.Runtime"] if depend not in references]
    for depend in references:
        if start > 0:
            start -= 1
            continue
        if depend in blacklist:
            log("/reference:%s (blacklist)" % depend)
            continue
        is_nuget, args = add_nuget(depend, depends, references)
        if is_nuget:
            for arg in args:
                yield arg
        else:
            prefix = ""
            if depend in facades:
                prefix = "Facades/"
            log("/reference:%s (system%s)" % (depend, ", facade" if prefix else ""))
            yield "/reference:%s%s.dll" % (prefix, depend)
            if depend in dependencies:
                log("\t/dependencies: %s" % ", ".join(dependencies[depend]))
                for depend in dependencies[depend]:
                    if depend not in references:
                        references.append(depend)

def debug(args, argv):
    runner_file = "/tmp/%s.sh" % basename(getcwd())
    runner = open(runner_file, "w")
    runner.write("#!/bin/sh\n")
    runner.write("cd %s\n" % getcwd())
    runner.write("exec \"%s\" %s\n" % (argv[0], " ".join(quote(a) for a in argv[1:])))
    runner.write("#csc %s\n" % " ".join(quote(a) for a in args))

def expand(argv):
    def parse(argv):
        for arg in argv:
            if arg.startswith("@"):
                with codecs.open(arg[1:], "r", "utf-8-sig") as args:
                    for arg in args.read().split():
                        yield arg.rstrip('\n')
            else:
                yield arg
    return list(parse(argv))

def main(argv):
    depends = {}
    if isfile(PROJECT_JSON):
        project_json = json.load(codecs.open(PROJECT_JSON, "r", "utf-8-sig"))
        depends.update(project_json.setdefault("dependencies", {}))
        depends.update(project_json["frameworks"]["net46"].setdefault("dependencies", {}))
    args = argv[1:]
    references = []
    for arg in args:
        if arg.startswith('/reference:'):
            path = arg[11:]
            reference = splitext(basename(path))[0]
            references.append(reference)
            if '/Facades/' in path:
                facades.add(reference)
    args += list(add_depends(references, depends))
    #debug(args, argv)
    execvp("csc", args)

if __name__ == "__main__":
    main(expand(argv))
